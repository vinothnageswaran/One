{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-12T05:59:14.360Z",
    "end": "2020-03-12T05:59:55.337Z",
    "duration": 40977,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ade8f678-8504-4d39-ae2d-4ae4ff9e22cb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f339ee74-656d-4723-b026-751b595e9a48",
          "title": "Verify UI elements and its labels in Deviation Management Dashboard",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Yard",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Yard",
              "timedOut": null,
              "duration": 3262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ff62adca-e0d2-465b-809a-52b1f03e6db6",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Equipment",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Equipment",
              "timedOut": null,
              "duration": 2108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3c5247d9-8404-48b5-b143-ac4eccee84a1",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Dashboard",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Dashboard",
              "timedOut": null,
              "duration": 1252,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "236a0ee1-2bad-48de-807a-194651e80b1c",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Save button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Save button",
              "timedOut": null,
              "duration": 1132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4e13f2d7-3066-4e92-8594-0dd122187fad",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Auxiliary button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Auxiliary button",
              "timedOut": null,
              "duration": 1224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "15dffe4f-e5d6-4d9a-8b6c-8a0f5cc82b9b",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify NY button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify NY button",
              "timedOut": null,
              "duration": 1719,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "bdf7c0da-74cd-48a4-bca6-cbef859e2c4d",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify SY button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify SY button",
              "timedOut": null,
              "duration": 1302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f3eba7de-b649-4c6d-8626-889770a4b762",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify EY button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify EY button",
              "timedOut": null,
              "duration": 869,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9dbd8642-d123-4dae-b064-b2b45bfb1f81",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify WY button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify WY button",
              "timedOut": null,
              "duration": 1040,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d59499c1-288a-4305-8a13-b01ba08a5563",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Rakearrival panel and it's label",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Rakearrival panel and it's label",
              "timedOut": null,
              "duration": 4650,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7c432c3e-112e-478d-b87b-4d600faadef0",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Stabled Rakes panel and it's label",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Stabled Rakes panel and it's label",
              "timedOut": null,
              "duration": 4270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f80f5ca5-063e-48a9-b181-365b863568fe",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify SPA Allocation panel and it's label",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify SPA Allocation panel and it's label",
              "timedOut": null,
              "duration": 3988,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "987c9385-33f8-4687-a997-b59f4f28b7b8",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Tide and it's label",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Tide and it's label",
              "timedOut": null,
              "duration": 4439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "37e3b889-6c9c-4369-82e6-e4e8c1e3fcce",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Rake information",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Rake information",
              "timedOut": null,
              "duration": 7846,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "79a8c241-a245-4610-b18c-f00c92e22692",
              "parentUUID": "f339ee74-656d-4723-b026-751b595e9a48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff62adca-e0d2-465b-809a-52b1f03e6db6",
            "3c5247d9-8404-48b5-b143-ac4eccee84a1",
            "236a0ee1-2bad-48de-807a-194651e80b1c",
            "4e13f2d7-3066-4e92-8594-0dd122187fad",
            "15dffe4f-e5d6-4d9a-8b6c-8a0f5cc82b9b",
            "bdf7c0da-74cd-48a4-bca6-cbef859e2c4d",
            "f3eba7de-b649-4c6d-8626-889770a4b762",
            "9dbd8642-d123-4dae-b064-b2b45bfb1f81",
            "d59499c1-288a-4305-8a13-b01ba08a5563",
            "7c432c3e-112e-478d-b87b-4d600faadef0",
            "f80f5ca5-063e-48a9-b181-365b863568fe",
            "987c9385-33f8-4687-a997-b59f4f28b7b8",
            "37e3b889-6c9c-4369-82e6-e4e8c1e3fcce",
            "79a8c241-a245-4610-b18c-f00c92e22692"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "5.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.0.1"
    }
  }
}