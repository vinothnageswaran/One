{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-12T06:00:58.560Z",
    "end": "2020-03-12T06:01:36.914Z",
    "duration": 38354,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "32406fb9-f33d-4118-b32f-5dd7f4c5a41f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6e16e11d-2ed4-40f3-a913-3934b4906552",
          "title": "Verify Nomination Source for a given vessel",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Nomination Source for a given vessel",
              "fullTitle": "Verify Nomination Source for a given vessel Verify Nomination Source for a given vessel",
              "timedOut": null,
              "duration": 37157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "fe1aa9fd-c6d0-4114-9dab-e8299239f30e",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check the vessel number is 1",
              "fullTitle": "Verify Nomination Source for a given vessel Check the vessel number is 1",
              "timedOut": null,
              "duration": 202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f50cdd8e-2d75-46c3-af66-89c76dafdaa6",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Product is MACF",
              "fullTitle": "Verify Nomination Source for a given vessel Verify Product is MACF",
              "timedOut": null,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "19e0d360-f52c-44c9-93e0-504e8dbd4048",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Tonnes is 100000",
              "fullTitle": "Verify Nomination Source for a given vessel Verify Tonnes is 100000",
              "timedOut": null,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8d47cd23-8566-4bfe-af00-5dcefc3f549e",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Left to Load is 100000",
              "fullTitle": "Verify Nomination Source for a given vessel Verify Left to Load is 100000",
              "timedOut": null,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9e86395d-a253-4c83-8a72-820f9a9c6475",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Reclaim from stockpile \"A3\" and the product is MACF",
              "fullTitle": "Verify Nomination Source for a given vessel Verify Reclaim from stockpile \"A3\" and the product is MACF",
              "timedOut": null,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7fbf9470-f6bb-44b4-a96c-2b0e84849a41",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify  Add Dual Load should be available",
              "fullTitle": "Verify Nomination Source for a given vessel Verify  Add Dual Load should be available",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8c7f0eb4-62c5-4e5c-922e-8dbc5ac47863",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Add Source should be available",
              "fullTitle": "Verify Nomination Source for a given vessel Verify Add Source should be available",
              "timedOut": null,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a42fe8f1-d988-48dd-bc64-c74941503955",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify manual override exist",
              "fullTitle": "Verify Nomination Source for a given vessel Verify manual override exist",
              "timedOut": null,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "98e6f2c5-df7a-40c4-8649-634605941cbd",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify remove source exist",
              "fullTitle": "Verify Nomination Source for a given vessel Verify remove source exist",
              "timedOut": null,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3d57f8e7-3b91-4c56-a865-19e4190c6da6",
              "parentUUID": "6e16e11d-2ed4-40f3-a913-3934b4906552",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe1aa9fd-c6d0-4114-9dab-e8299239f30e",
            "f50cdd8e-2d75-46c3-af66-89c76dafdaa6",
            "19e0d360-f52c-44c9-93e0-504e8dbd4048",
            "8d47cd23-8566-4bfe-af00-5dcefc3f549e",
            "9e86395d-a253-4c83-8a72-820f9a9c6475",
            "7fbf9470-f6bb-44b4-a96c-2b0e84849a41",
            "8c7f0eb4-62c5-4e5c-922e-8dbc5ac47863",
            "a42fe8f1-d988-48dd-bc64-c74941503955",
            "98e6f2c5-df7a-40c4-8649-634605941cbd",
            "3d57f8e7-3b91-4c56-a865-19e4190c6da6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38098,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "5.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.0.1"
    }
  }
}