{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-10T13:31:34.045Z",
    "end": "2020-03-10T13:32:34.355Z",
    "duration": 60310,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "791f47e7-0a21-434e-b324-109320e44d3d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
          "title": "Verify UI elements and its labels in Deviation Management Dashboard",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Yard",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Yard",
              "timedOut": null,
              "duration": 6724,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3d7a9199-c5ff-4d7f-b29d-bd536b5688f4",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Equipment",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Equipment",
              "timedOut": null,
              "duration": 3180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d7447ab6-973a-4262-b61d-5c9b62cf1d0e",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Dashboard",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Dashboard",
              "timedOut": null,
              "duration": 3123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c24e5c83-7b3d-42fe-8ccc-df8c5d3a9c97",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Save button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Save button",
              "timedOut": null,
              "duration": 2118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f903d8c5-eecd-44a5-bbe9-ab78a699ce10",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Auxiliary button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Auxiliary button",
              "timedOut": null,
              "duration": 2282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9771473e-b641-4f7b-97d9-6df4f05fb1f6",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify NY button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify NY button",
              "timedOut": null,
              "duration": 1650,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6e86d0a2-0b8f-447a-8613-1e946b30c419",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify SY button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify SY button",
              "timedOut": null,
              "duration": 2105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "102a749c-7362-4190-b72f-c6e2ac1d041e",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify EY button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify EY button",
              "timedOut": null,
              "duration": 2593,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5f1ec2a9-d899-49b7-bb23-7adbd2f78225",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify WY button",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify WY button",
              "timedOut": null,
              "duration": 1379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "09c021ba-3ef5-489f-af1f-e34aa38a3647",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Rakearrival panel and it's label",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Rakearrival panel and it's label",
              "timedOut": null,
              "duration": 5918,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ffca3b4d-cd77-4caf-b2a7-6bc53feea0f5",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Stabled Rakes panel and it's label",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Stabled Rakes panel and it's label",
              "timedOut": null,
              "duration": 4835,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d1039df4-1d2d-426c-a554-025356eaaaa1",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify SPA Allocation panel and it's label",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify SPA Allocation panel and it's label",
              "timedOut": null,
              "duration": 5832,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e09e69e1-de54-4ac0-a02a-079aacf93439",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Tide and it's label",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Tide and it's label",
              "timedOut": null,
              "duration": 5713,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "81bcd3bb-12a5-4e7e-818a-15078161f1c4",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Rake information",
              "fullTitle": "Verify UI elements and its labels in Deviation Management Dashboard Verify Rake information",
              "timedOut": null,
              "duration": 8480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "cd28b109-f8a6-47be-a450-9fd635c3fc6c",
              "parentUUID": "d29c68e4-f6f1-449d-8d3d-be5e99c442cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d7a9199-c5ff-4d7f-b29d-bd536b5688f4",
            "d7447ab6-973a-4262-b61d-5c9b62cf1d0e",
            "c24e5c83-7b3d-42fe-8ccc-df8c5d3a9c97",
            "f903d8c5-eecd-44a5-bbe9-ab78a699ce10",
            "9771473e-b641-4f7b-97d9-6df4f05fb1f6",
            "6e86d0a2-0b8f-447a-8613-1e946b30c419",
            "102a749c-7362-4190-b72f-c6e2ac1d041e",
            "5f1ec2a9-d899-49b7-bb23-7adbd2f78225",
            "09c021ba-3ef5-489f-af1f-e34aa38a3647",
            "ffca3b4d-cd77-4caf-b2a7-6bc53feea0f5",
            "d1039df4-1d2d-426c-a554-025356eaaaa1",
            "e09e69e1-de54-4ac0-a02a-079aacf93439",
            "81bcd3bb-12a5-4e7e-818a-15078161f1c4",
            "cd28b109-f8a6-47be-a450-9fd635c3fc6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55932,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "5.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/separate-reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.0.1"
    }
  }
}